create table public.profiles (
  id uuid not null,
  username character varying(255) not null,
  email character varying(255) not null,
  role public.user_role null default 'employee'::user_role,
  created_at timestamp with time zone null default CURRENT_TIMESTAMP,
  updated_at timestamp with time zone null default CURRENT_TIMESTAMP,
  image_url text null,
  org_id bigint null,
  constraint users_pkey primary key (id),
  constraint users_email_key unique (email),
  constraint users_id_fkey foreign KEY (id) references auth.users (id),
  constraint users_org_id_fkey foreign KEY (org_id) references core_organizations (id)
) TABLESPACE pg_default;

create index IF not exists idx_profiles_user_id on public.profiles using btree (id) TABLESPACE pg_default;

create table public.core_organizations (
  id bigint generated by default as identity not null,
  store_name character varying(255) not null,
  manager_id uuid null,
  email character varying(255) not null,
  phone character varying(255) null,
  status boolean not null,
  country character varying(255) null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null,
  location text null,
  constraint core_organizations_pkey primary key (id),
  constraint core_organizations_manager_key unique (manager_id),
  constraint core_organizations_manager_id_fkey foreign KEY (manager_id) references profiles (id) on delete set null
) TABLESPACE pg_default;

create trigger update_core_organizations_updated_at BEFORE
update on core_organizations for EACH row
execute FUNCTION update_modified_column ();

create table public.user_term_acceptance (
  id bigint generated by default as identity not null,
  user_id uuid not null,
  is_accepted boolean null,
  created_at timestamp with time zone null default now(),
  constraint user_term_acceptance_pkey primary key (id),
  constraint user_term_acceptance_user_id_fkey foreign KEY (user_id) references profiles (id)
) TABLESPACE pg_default;

create table public.blogs (
  id bigint generated by default as identity not null,
  title text not null,
  description text null,
  content text not null,
  images jsonb null,
  tags text[] null,
  author_id uuid null,
  published boolean null default false,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint blogs_pkey primary key (id),
  constraint blogs_author_id_fkey foreign KEY (author_id) references profiles (id)
) TABLESPACE pg_default;

create table public.blog_reads (
  id bigint generated by default as identity not null,
  user_id uuid not null,
  blog_id bigint not null,
  read_at timestamp with time zone null default now(),
  constraint blog_reads_pkey primary key (id),
  constraint blog_reads_user_id_blog_id_key unique (user_id, blog_id),
  constraint blog_reads_blog_id_fkey foreign KEY (blog_id) references blogs (id),
  constraint blog_reads_user_id_fkey foreign KEY (user_id) references profiles (id),
  constraint fk_parent foreign KEY (user_id) references profiles (id) on delete CASCADE
) TABLESPACE pg_default;

create table public.ingredients (
  id bigint generated by default as identity not null,
  name character varying(255) not null,
  description text null,
  category character varying(100) null,
  measurement_unit character varying(50) not null,
  created_at timestamp with time zone null default CURRENT_TIMESTAMP,
  updated_at timestamp with time zone null default CURRENT_TIMESTAMP,
  constraint ingredients_pkey primary key (id)
) TABLESPACE pg_default;

create trigger set_timestamp_ingredients BEFORE
update on ingredients for EACH row
execute FUNCTION trigger_set_timestamp ();

create table public.recipe_ingredients (
  id bigint generated by default as identity not null,
  beverage_id bigint not null,
  ingredient_id bigint not null,
  quantity numeric(10, 2) not null,
  notes text null,
  created_at timestamp with time zone null default CURRENT_TIMESTAMP,
  updated_at timestamp with time zone null default CURRENT_TIMESTAMP,
  constraint recipe_ingredients_pkey primary key (id),
  constraint recipe_ingredients_beverage_id_fkey foreign KEY (beverage_id) references beverages (id) on delete CASCADE,
  constraint recipe_ingredients_ingredient_id_fkey foreign KEY (ingredient_id) references ingredients (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_beverage_id on public.recipe_ingredients using btree (beverage_id) TABLESPACE pg_default;

create index IF not exists idx_ingredient_id on public.recipe_ingredients using btree (ingredient_id) TABLESPACE pg_default;

create trigger set_timestamp_recipe_ingredients BEFORE
update on recipe_ingredients for EACH row
execute FUNCTION trigger_set_timestamp ();

create table public.beverages (
  id bigint generated by default as identity not null,
  name character varying(255) not null,
  description text null,
  image_url text null,
  created_at timestamp with time zone null default CURRENT_TIMESTAMP,
  updated_at timestamp with time zone null default CURRENT_TIMESTAMP,
  execution text null,
  constraint beverages_pkey primary key (id)
) TABLESPACE pg_default;

create index IF not exists idx_beverage_name on public.beverages using btree (name) TABLESPACE pg_default;

create trigger set_timestamp_beverages BEFORE
update on beverages for EACH row
execute FUNCTION trigger_set_timestamp ();